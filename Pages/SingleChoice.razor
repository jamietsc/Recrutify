@page "/test/{tid:int}"
@using Recrutify.Models
@using Recrutify.DataAccessLayer.Data
@using Recrutify.DataAccessLayer.Repositories
@inject BewerberModel bewerberModel
@inject BewerberTestModel bewerberTestModel
@inject IMultipleChoice<MultipleChoiceModel> multipleChoiceService
@inject IBewerber<BewerberModel> bewerberData
@inject NavigationManager navigationManager
@inject HelperModel helperModel


<PageTitle>Einstellungstest</PageTitle>

<div style="height: calc(100vh - 200px); overflow-y: auto;">
    <h1>Einstellungstest [Hier Testname einfügen]</h1>

    @if (multipleChoiceQuestions != null && multipleChoiceQuestions.Count() > 0)
    {
        var currentQuestion = multipleChoiceQuestions.ElementAt(helperModel.questionNumber - 1);
        <!-- Hole die aktuelle Frage -->

        <h2>Frage @helperModel.questionNumber: @currentQuestion.Text</h2>

        <div>
            <p>@currentQuestion.Text</p>
            <div>
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" @onchange="() => SetAnswer(currentQuestion, 1)" id="Answer1_@currentQuestion.FID">
                <label class="form-check-label" for="Answer1_@currentQuestion.FID">@currentQuestion.Antwort_1</label>
            </div>
            <div>
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" @onchange="() => SetAnswer(currentQuestion, 2)" id="Answer2_@currentQuestion.FID">
                <label class="form-check-label" for="Answer2_@currentQuestion.FID">@currentQuestion.Antwort_2</label>
            </div>
            <div>
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" @onchange="() => SetAnswer(currentQuestion, 3)" id="Answer3_@currentQuestion.FID">
                <label class="form-check-label" for="Answer3_@currentQuestion.FID">@currentQuestion.Antwort_3</label>
            </div>
            <div>
                <input class="form-check-input" type="radio" name="radioField_@currentQuestion.FID" @onchange="() => SetAnswer(currentQuestion, 4)" id="Answer4_@currentQuestion.FID">
                <label class="form-check-label" for="Answer4_@currentQuestion.FID">@currentQuestion.Antwort_4</label>
            </div>
        </div>
    }
    else
    {
        <p>Lade Fragen...</p>
    }
</div>

<div class="position-absolute bottom-0" style="display: grid; grid-template-columns: 1fr 2fr 1fr; align-items: center; height: 100px; width: 1280px; background-color: white; border-top: 1px solid lightgrey;">
    <button type="button" disabled="@isPreviousButtonDisabled()" @onclick="previousPage">Zurück</button>
    <div>Hier könnte Ihre Werbung stehen.</div>
    <button type="button" @onclick="nextPage">Weiter</button>
</div>

@code {
    [Parameter]
    public int tid { get; set; }

    private List<MultipleChoiceModel> multipleChoiceQuestions; // Liste der Fragen
    private int korrekteAntworten = 0;

    protected override async Task OnInitializedAsync()
    {
        multipleChoiceQuestions = (await multipleChoiceService.GetMultipleChoice(tid)).ToList();
        helperModel.questionNumber = 1; // Erste Frage starten
    }

    private void SetAnswer(MultipleChoiceModel multipleChoiceModel, int selectedAnswer)
    {
        multipleChoiceModel.AusgewählteAntwort = selectedAnswer;
    }

    private bool isPreviousButtonDisabled()
    {
        return helperModel.questionNumber == 1;
    }

    private void previousPage()
    {
        if (helperModel.questionNumber > 1)
        {
            helperModel.questionNumber--;
        }
    }

    private void nextPage()
    {
        if (helperModel.questionNumber < multipleChoiceQuestions.Count)
        {
            helperModel.questionNumber++;
        }
    }

    private async void auswerten() //Funktion welche am Ende im Button benutzt werden soll, dient zum speichern der Punkte in die DB
    {
        foreach(var question in multipleChoiceQuestions)
        {
            if ((question.AusgewählteAntwort == 1 && question.Richtig_1) ||
                (question.AusgewählteAntwort == 2 && question.Richtig_2) ||
                (question.AusgewählteAntwort == 3 && question.Richtig_3) ||
                (question.AusgewählteAntwort == 4 && question.Richtig_4))
            {
                korrekteAntworten++;
            }

            await bewerberData.InsertPunktzahl(bewerberModel);
        }
    }
}
